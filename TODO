Before first release:

wadgc:
- creates temp files in current directory.

- produces different results on linux and BSD (output wads have different
md5sums), although wadpat pulls identical .ppm files out of both (wadext
extracts different raw lump though). Will have to learn the patch header
format better to understand why, and whether it's an actual problem.

- wadgc segfaults on invalid input... and I'm not even sure why my input
was invalid. I seriously might rewrite this from scratch.

wadconvgame still missing lots of textures.

deutex DOOMWADDIR support. It sort-of exists, but it expects a DOS-style
setup, where there's one IWAD per directory. It looks in DOOMWADDIR
for each supported IWAD in a hard-coded order and uses the first one it
finds. Which means if DOOMWADDIR contains both doom.wad and doom2.wad,
there is no way to use deutex with doom2.wad.

deutex also creates directories mode 700. Ugh.

Lots of stuff has a high-ASCII copyright symbol embedded in it. Get rid
of these (replace with UTF-8 one? Does the Windows cmd.exe support UTF-8?),
maybe just replace with (c).

Test the utilities more thorougly on FreeBSD and Windows. The Windows
stuff probably needs more win-ish hard-coded paths.

Install tkwadcad's lib/ dir. In general, see if tkwadcad can actually
be used for anything at all.

Sometime after first release:

Fix warm. Currently (and for a long time now) it fails to build nodes/etc
if the input wadfile doesn't have entries for them (even empty ones will
do, hence slige's -nulls option). Ideally, warm should add the lumps
if they're missing. If that's too much trouble, it should at least warn
and exit(1) or such, if the lumps are missing from the input.

warm can also segfault when using -m=, see the testsuite.

wadldc (and probably a lot of other tools) can segfault if fed a bad
wad file. Should exit with an error message instead.

Add support for games other than doom/doom2 to wadwhat. It might be better
to rewrite from scratch (still in C though, don't make it a perl script).

Rewrite xew so it uses a better toolkit. GTK+ is nice. While we're at it,
make it able to use SDL_mixer to play MIDI and audio files internally
(currently the internal audio player is OSS-only; SDL uses whatever the
platform has). Plus, threads, instead of freezing up the UI.

Replace the fricken Makefile. Use autoconf too?

Look at adding doom64ex support for at least some of the tools. See
README_doom64ex.txt.

Autodetection for xforms (should be automatic, if I go with autoconf),
and for ARCH in the slackware target.

Replace all the conditional typedef crap with <stdint.h> and uint_*_t.
Better make sure all my target platforms have that. It's in the ISO C99
spec, so probably gcc always has it. So far Linux, FreeBSD, MinGW-w64
all have it.

Make sure everything builds and runs on NetBSD, OpenBSD, and maybe OSX.

Heck, try it on Minix! But don't waste time fixing it, if it doesn't work.

Try big-endian platforms. Possible with qemu I think, if I'm not in a hurry.
If not, dig old SparcStations out of storage.

Fix the existing test suite.

Add rpm and deb targets. And whatever archlinux uses I guess.

Far future: port/rewrite everything in some cross-platform language. I
dunno what to use. Perl sucks on win32 (some would say it sucks
everywhere). Java sucks for command-line tools due to the overhead of
setting up & tearing down the JVM for every invocation (though on modern
enough machines it doesn't really matter so much). C# can't be trusted
to be (or stay) cross-platform, considering it's a MS technology, plus it
suffers from the VM overhead thing too. Python may be an option, I don't
know it real well though. Also, need to investigate gcj (the binaries
it produces look like native ones, to the "file" command, but do they
run any faster than "java foo.class"?)... whatever I do, will probably
end up being a separate project (jwadtools or pywadtools or whatever).

